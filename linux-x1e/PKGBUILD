# AArch64 multi-platform
# Maintainer: Kevin Mihelich <kevin@archlinuxarm.org>

buildarch=8
_branch=wip/x1e80100-6.11-rc5

pkgbase=linux-x1e
_srcname=linux-6.11-rc5
_kernelname=${pkgbase#linux}
_desc="Linux for Snapdragon X"
pkgver="6.11.rc5"
pkgrel=0
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'kmod' 'inetutils' 'bc' 'git' 'dtc')
options=('!strip')
source=('config'
        'linux.preset'
        '60-linux.hook'
        '90-linux.hook'
        'mkinitcpio.conf.d-x1e.conf'
        'ukify.conf')

md5sums=('0b4ec5882cc93f93a0c10f60a33ec430'
         '912995442e210b8c9b9b007eb3d67a3e'
         '0a5f16bfec6ad982a2f6782724cca8ba'
         '6f99095fbe9f577233b53a83802aab59'
         '746fbd75eb10fb3dcd3428353c29bbe2'
         'a3025a9b405e2c0090ff17f149d44462')

_dtbs=('arch/arm64/boot/dts/qcom/x1e78100-lenovo-thinkpad-t14s.dtb'
       'arch/arm64/boot/dts/qcom/x1e80100-asus-vivobook-s15.dtb'
       'arch/arm64/boot/dts/qcom/x1e80100-crd.dtb'
       'arch/arm64/boot/dts/qcom/x1e80100-lenovo-yoga-slim7x.dtb'
       'arch/arm64/boot/dts/qcom/x1e80100-qcp.dtb')


prepare() {
  MAKEFLAGS=-j32
  echo "Shallow cloning linux-x1e repo"
  if [[ -d ${_srcname} ]]; then
    cd $_srcname
    git fetch --depth=1 origin ${_branch}
    git checkout -b ${_branch} || (git checkout ${_branch} && git reset --hard origin/${_branch})
  else
    git clone --depth=1 https://github.com/anonymix007/linux-x1e.git ${_srcname} -b ${_branch}
  fi

  cd $_srcname

  echo "Setting version..."
  #scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  # add upstream patch
  # We are using a custom tree, not needed

  # ALARM patches
  #patch -Np1 -i ../fix-mutter.patch

  cat "${srcdir}/config" > ./.config
}

build() {
  cd ${_srcname}

  # get kernel version
  make prepare
  make -s kernelrelease > version

  # build!
  unset LDFLAGS
  make ${MAKEFLAGS} Image Image.gz modules
  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  make ${MAKEFLAGS} DTC_FLAGS="-@" dtbs
}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'x1e-firmware' 'kmod' 'mkinitcpio>=0.7' 'systemd-ukify')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}" "WIREGUARD-MODULE")
  replaces=('linux-armv8')
  conflicts=('linux')
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=${pkgname}.install

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image (compressed) and dtbs..."
  install -Dm644 arch/arm64/boot/Image.gz -T "${pkgdir}/boot/vmlinuz-linux"
  install -Dm644 arch/arm64/boot/Image -T "${pkgdir}/boot/vmlinux"
  #make INSTALL_DTBS_PATH="${pkgdir}/boot/dtbs" dtbs_install
  # We just need X1E dtbs
  for _dtb in "${_dtbs[@]}"; do
    install -Dm644 "${_dtb}" -t "${pkgdir}/boot"
  done

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 DEPMOD=/doesnt/exist modules_install

  # remove build and source links if they exist
  if [[ -L "$modulesdir"/source ]]; then
    rm "$modulesdir"/source
  fi
  if [[ -L "$modulesdir"/build ]]; then
    rm "$modulesdir"/build
  fi

  # sed expression for following substitutions
  local _subst="
    s|%PKGBASE%|${pkgbase}|g
    s|%KERNVER%|${kernver}|g
  "

  # install mkinitcpio preset file
  sed "${_subst}" ../linux.preset |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # install mkinitcpio.conf.d-x1e.conf
  sed "${_subst}" ../mkinitcpio.conf.d-x1e.conf |
    install -Dm644 /dev/stdin "${pkgdir}/etc/mkinitcpio.conf.d/x1e.conf"

  # install pacman hooks
  sed "${_subst}" ../60-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/60-${pkgbase}.hook"
  sed "${_subst}" ../90-linux.hook |
    install -Dm644 /dev/stdin "${pkgdir}/usr/share/libalpm/hooks/90-${pkgbase}.hook"

  # install systemd-ukify config file
  install -Dm644 ../ukify.conf "${pkgdir}/etc/ukify.conf"
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-x1e-headers=${pkgver}")
  conflicts=('linux-headers')

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/arm64" -m644 arch/arm64/Makefile
  cp -t "$builddir" -a scripts

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/arm64" -a arch/arm64/include
  install -Dt "$builddir/arch/arm64/kernel" -m644 arch/arm64/kernel/asm-offsets.s
  mkdir -p "$builddir/arch/arm"
  cp -t "$builddir/arch/arm" -a arch/arm/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */arm64/ || $arch == */arm/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
